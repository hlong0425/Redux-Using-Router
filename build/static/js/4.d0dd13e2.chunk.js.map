{"version":3,"sources":["lib/api.js","hook/useHttp.js","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuotesDetail.js"],"names":["FIREBASE_DOMAIN","addQuote","quoteData","a","fetch","method","body","JSON","stringify","headers","response","json","data","ok","Error","message","getAllQuotes","key","transformQuotes","push","id","getSingleQuote","quoteId","statusText","loadedQuote","addComment","requestData","console","log","commentData","getAllComments","transformedComments","httpReducer","state","action","type","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","module","exports","NewCommentForm","props","commentTextRef","useRef","onAddedComment","useEffect","submitFormHandler","event","preventDefault","commentedValue","current","value","trim","text","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","loadedComments","useState","isAddingComment","setIsAddingComment","params","useParams","addedCommentHandler","length","onClick","HighlightedQuote","quote","author","QuotesDetail","routeMatch","useRouteMatch","exact","path","to","url"],"mappings":"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","file":"static/js/4.d0dd13e2.chunk.js","sourcesContent":["const FIREBASE_DOMAIN = 'https://react-http-dc150-default-rtdb.firebaseio.com/';\r\n\r\nconst addQuote = async function (quoteData) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(quoteData),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not create quote.');\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst getAllQuotes = async function () {\r\n    const response = await fetch(FIREBASE_DOMAIN + '/quotes.json');\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not fetch quotes.');\r\n    }\r\n\r\n    const transformQuotes = [];\r\n    for (let key in data) {\r\n        transformQuotes.push({\r\n            id: key,\r\n            ...data[key],\r\n        })\r\n    }\r\n\r\n    return transformQuotes;\r\n}\r\n\r\nconst getSingleQuote = async function (quoteId) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\r\n\r\n    if (!response.ok) {\r\n        throw new Error(response.statusText || 'Could not fetch quotes.');\r\n    }\r\n    const data = await response.json();\r\n\r\n    if (data === null) {\r\n        return null\r\n    }\r\n\r\n    const loadedQuote = {\r\n        id: quoteId,\r\n        ...data,\r\n    }\r\n\r\n    return loadedQuote;\r\n}\r\n\r\nconst addComment = async function (requestData) {\r\n    console.log(requestData.quoteId);\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestData.commentData),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not add comments.');\r\n    }\r\n\r\n    return {}\r\n}\r\n\r\nconst getAllComments = async function (quoteId) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n        throw new Error(data.message || 'Could not get comments');\r\n    }\r\n\r\n    const transformedComments = [];\r\n\r\n    for (let key in data) {\r\n        transformedComments.push({\r\n            id: key, ...data[key],\r\n        })\r\n    }\r\n\r\n    return transformedComments;\r\n}\r\n\r\nexport {\r\n    getAllQuotes,\r\n    getSingleQuote,\r\n    addComment,\r\n    getAllComments,\r\n    addQuote\r\n}","import { useReducer, useCallback } from 'react';\r\n\r\nfunction httpReducer(state, action) {\r\n    if (action.type === 'SEND') {\r\n        return {\r\n            data: null,\r\n            error: null,\r\n            status: 'pending',\r\n        };\r\n    }\r\n\r\n    if (action.type === 'SUCCESS') {\r\n        return {\r\n            data: action.responseData,\r\n            error: null,\r\n            status: 'completed',\r\n        };\r\n    }\r\n\r\n    if (action.type === 'ERROR') {\r\n        return {\r\n            data: null,\r\n            error: action.errorMessage,\r\n            status: 'completed',\r\n        };\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nfunction useHttp(requestFunction, startWithPending = false) {\r\n    const [httpState, dispatch] = useReducer(httpReducer, {\r\n        status: startWithPending ? 'pending' : null,\r\n        data: null,\r\n        error: null,\r\n    });\r\n\r\n    const sendRequest = useCallback(\r\n        async function (requestData) {\r\n            dispatch({ type: 'SEND' });\r\n            try {\r\n                const responseData = await requestFunction(requestData);\r\n                dispatch({ type: 'SUCCESS', responseData });\r\n            } catch (error) {\r\n                dispatch({\r\n                    type: 'ERROR',\r\n                    errorMessage: error.message || 'Something went wrong!',\r\n                });\r\n            }\r\n        },\r\n        [requestFunction]\r\n    );\r\n\r\n    return {\r\n        sendRequest,\r\n        ...httpState,\r\n    };\r\n}\r\n\r\nexport default useHttp;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1WLt-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__1gQt6\",\"loading\":\"NewCommentForm_loading__1VIHB\",\"control\":\"NewCommentForm_control__1UXcV\",\"actions\":\"NewCommentForm_actions__3n_tn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__38TaW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__x1bnK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3n8xv\"};","import { useEffect, useRef } from 'react';\nimport useHttp from '../../hook/useHttp';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const { status, error, sendRequest } = useHttp(addComment);\n  const commentTextRef = useRef();\n  const { onAddedComment } = props; //Địa chỉ vẫn là A1; \n\n  console.log(status);\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      props.onAddedComment();\n    }\n  }, [status, error, onAddedComment])\n\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    //Validate\n    const commentedValue = commentTextRef.current.value\n    if (commentedValue.trim() === '') {\n      return\n    }\n\n    // send comment to server\n    const quoteId = props.quoteId;\n    sendRequest({ commentData: { text: commentedValue }, quoteId });\n  };\n\n\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hook/useHttp';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList'\nconst Comments = () => {\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  console.log('Load Comments page');\n\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { id: quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(params.id);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  // Địa chỉ đang là a1; \n  // const addedCommentHandler = useCallback(() => {\n  //   sendRequest(quoteId);\n  // }, [quoteId, sendRequest])\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  if (status === 'completed' && loadedComments?.length > 0) {\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p>No comments were added yet</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Route, useParams } from \"react-router-dom\";\r\nimport { Fragment } from \"react/cjs/react.production.min\";\r\nimport Comments from '../components/comments/Comments'\r\nimport HightLightedQuote from '../components/quotes/HighlightedQuote';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useRouteMatch } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport useHttp from \"../hook/useHttp\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport { useEffect } from \"react\";\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\n\r\n\r\n\r\nconst QuotesDetail = (props) => {\r\n    const params = useParams();\r\n    const { data: quote, error, status, sendRequest } = useHttp(getSingleQuote, true)\r\n    const routeMatch = useRouteMatch();\r\n\r\n    useEffect(() => {\r\n        sendRequest(params.id);\r\n    }, [sendRequest, params.id])\r\n\r\n    if (status === 'pending') {\r\n        return <div className=\"centered\"><LoadingSpinner /></div>\r\n    }\r\n\r\n\r\n    if (status === 'completed' && error) {\r\n        return <div>{error}</div>\r\n    }\r\n\r\n    if (status === 'completed' && !quote) {\r\n        return <div>\r\n            Id invalid\r\n        </div>\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <HightLightedQuote text={quote.text} author={quote.author} />\r\n            <Route exact path={routeMatch.path}>\r\n                <div className='centered'>\r\n                    <Link className=\"btn--flat\" to={`${routeMatch.url}/comments`}>Load Comments</Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`/quotes/:id/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default QuotesDetail; "],"sourceRoot":""}